{"version":3,"sources":["components/GameRow.js","components/GameCol.js","redux/actions.js","redux/actionTypes.js","components/NewGame.js","components/Game.js","App.js","serviceWorker.js","redux/reducers/gameMechanics.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["GameRow","cols","Row","map","col","id","state","useSelector","gameMechanics","dispatch","useDispatch","Col","style","padding","fontSize","border","minHeight","onClick","e","type","payload","target","key","board","GameCol","NewGame","Button","Object","keys","box","document","getElementById","innerHTML","Game","player","playerOnesTurn","rows","Container","width","margin","height","slice","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","topLeft","top","topRight","left","middle","right","botLeft","bot","botRight","action","boxName","newBoard","allReducers","combineReducers","createStore","rootElement","ReactDOM","render","store","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1a1d33fc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Row from 'react-bootstrap/Row';\r\nimport GameCol from './GameCol';\r\n\r\nexport default function GameRow(cols) {\r\n  return (\r\n    <Row>\r\n      {cols.map(col => GameCol(col))}\r\n    </Row>\r\n  )};\r\n","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { playMove} from \"../redux/actions\";\r\n\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nexport default function GameCol(id) {\r\n  var colStyle = {\r\n      padding: '1rem',\r\n      fontSize: '4vw',\r\n      border: '5px solid white',\r\n      minHeight: '10vw'\r\n  };\r\n  var state = useSelector(state => state.gameMechanics)\r\n  var dispatch = useDispatch();\r\n  var handleOnClick = (e) => {\r\n    dispatch(playMove(e.target.id));\r\n  };\r\n\r\n  return (\r\n    <Col id={id} style={colStyle} onClick={handleOnClick} key={id}>{state.board[id]}</Col>\r\n  )\r\n};\r\n","import { PLAY_MOVE, NEW_GAME} from \"./actionTypes\";\r\n\r\nexport const playMove = (boxName) => ({\r\n  type: PLAY_MOVE,\r\n  payload: boxName\r\n});\r\n\r\nexport const newGame = () => ({\r\n  type: NEW_GAME\r\n});\r\n","export const PLAY_MOVE = \"PLAY_MOVE\";\r\nexport const NEW_GAME = 'NEW_GAME';\r\n","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { newGame} from \"../redux/actions\";\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function NewGame() {\r\n  var board = useSelector(state => state.gameMechanics).board;\r\n  var dispatch = useDispatch();\r\n  var handleOnClick = (e) => {\r\n    dispatch(newGame());\r\n    function clearBox(box) {\r\n      document.getElementById(box).innerHTML = ''\r\n    }\r\n    Object.keys(board).map(clearBox)\r\n  };\r\n\r\n  return (\r\n    <Button onClick={handleOnClick}>New Game</Button>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport GameRow from './GameRow';\r\nimport NewGame from './NewGame';\r\n\r\nexport default function Game() {\r\n  var player = useSelector(state => state.gameMechanics).playerOnesTurn;\r\n  var containerStyle = {\r\n    width: '33%',\r\n    margin:'0 auto',\r\n    height: '100vw'\r\n  };\r\n\r\n  const rows = ['topLeft','top','topRight',\r\n    'left','middle','right',\r\n    'botLeft','bot','botRight']\r\n\r\n  return (\r\n    <Container style={containerStyle}>\r\n      <h1>Player {player ? '1' : '2'}'s Turn</h1>\r\n      {GameRow(rows.slice(0,3))}\r\n      {GameRow(rows.slice(3,6))}\r\n      {GameRow(rows.slice(6,9))}\r\n      <NewGame></NewGame>\r\n    </Container>\r\n    );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tic Tac Toe</h1>\n        <br></br>\n        <Game/>\n\n      </header>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { PLAY_MOVE, NEW_GAME } from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  board: {\r\n    topLeft: '',\r\n    top: '',\r\n    topRight: '',\r\n    left: '',\r\n    middle: '',\r\n    right: '',\r\n    botLeft: '',\r\n    bot: '',\r\n    botRight: ''\r\n  },\r\n  playerOnesTurn: true\r\n};\r\n\r\nconst gameMechanics = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case PLAY_MOVE: {\r\n      if (!state.board[action.payload]) {\r\n        const boxName = action.payload\r\n        let newBoard = state.board;\r\n        newBoard[boxName] = state.playerOnesTurn ? 'X' : 'O';\r\n        return {\r\n          board: newBoard,\r\n          playerOnesTurn: !state.playerOnesTurn\r\n        }\r\n      }\r\n      return state\r\n    } case NEW_GAME: {\r\n      return {\r\n        board: {\r\n          topLeft: '',\r\n          top: '',\r\n          topRight: '',\r\n          left: '',\r\n          middle: '',\r\n          right: '',\r\n          botLeft: '',\r\n          bot: '',\r\n          botRight: ''\r\n        },\r\n        playerOnesTurn: true\r\n      };\r\n    } default:\r\n      return state;\r\n  }\r\n}\r\nexport default gameMechanics;\r\n","import { combineReducers } from \"redux\";\r\nimport gameMechanics from \"./gameMechanics\";\r\n\r\nconst allReducers = combineReducers({gameMechanics});\r\n\r\nexport default allReducers;\r\n","import { createStore } from \"redux\";\r\nimport allReducers from \"./reducers\";\r\n\r\nexport default createStore(allReducers);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from \"./redux/store\";\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  rootElement\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}